-- 1. Setup Tables for User Data

-- Create a table for public profiles
create table if not exists profiles (
  id uuid references auth.users not null primary key,
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  avatar_url text,
  website text,
  gemini_api_key text,
  hugging_face_key text,

  constraint username_length check (char_length(username) >= 3)
);

-- Set up Row Level Security (RLS)
alter table profiles
  enable row level security;

drop policy if exists "Public profiles are viewable by everyone." on profiles;
drop policy if exists "Users can view their own profile." on profiles;
drop policy if exists "Authenticated users can view profiles." on profiles;

create policy "Users can view their own profile." on profiles
  for select using (auth.uid() = id);

create policy "Authenticated users can view profiles." on profiles
  for select to authenticated using (true);

drop policy if exists "Users can insert their own profile." on profiles;
create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);

drop policy if exists "Users can update own profile." on profiles;
create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id);

-- This trigger automatically creates a profile entry when a new user signs up.
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;

drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- 2. WatchFinder App Tables

-- Table for user taste profiles
create table if not exists watchfinder_profiles (
  id uuid primary key references public.profiles(id) on delete cascade,
  favorite_genres text[],
  favorite_actors text[],
  favorite_keywords text[],
  excluded_genres text[],
  preferred_decades text[],
  updated_at timestamp with time zone default now()
);

-- Add preferred_description column if it doesn't exist
ALTER TABLE public.watchfinder_profiles ADD COLUMN IF NOT EXISTS preferred_description text;


alter table watchfinder_profiles enable row level security;
drop policy if exists "Users can manage their own WatchFinder profile." on watchfinder_profiles;
create policy "Users can manage their own WatchFinder profile." on watchfinder_profiles
  for all using (auth.uid() = id);

-- Table for user's favorite media
create table if not exists watchfinder_favorites (
  id bigint generated by default as identity primary key,
  user_id uuid references public.profiles(id) on delete cascade not null,
  media_id int not null,
  media_type text not null,
  created_at timestamp with time zone default now(),
  unique(user_id, media_id, media_type)
);

alter table watchfinder_favorites enable row level security;
drop policy if exists "Users can manage their own favorites." on watchfinder_favorites;
create policy "Users can manage their own favorites." on watchfinder_favorites
  for all using (auth.uid() = user_id);

-- Table for user's liked/disliked media
create table if not exists watchfinder_ratings (
  id bigint generated by default as identity primary key,
  user_id uuid references public.profiles(id) on delete cascade not null,
  media_id int not null,
  media_type text not null,
  title text not null,
  rating text not null, -- 'like' or 'dislike'
  created_at timestamp with time zone default now(),
  unique(user_id, media_id, media_type)
);

alter table watchfinder_ratings enable row level security;
drop policy if exists "Users can manage their own ratings." on watchfinder_ratings;
create policy "Users can manage their own ratings." on watchfinder_ratings
  for all using (auth.uid() = user_id);


-- 3. AI CV Architect App Table

-- Table for user's CV data
create table if not exists cv_data (
  id uuid primary key references public.profiles(id) on delete cascade,
  raw_info text, -- The original 'brain dump'
  linkedin_url text,
  image_url text,
  experience jsonb, -- Array of {title, company, dates, description}
  education jsonb, -- Array of {institution, degree, dates}
  skills text[],
  updated_at timestamp with time zone default now()
);

alter table cv_data enable row level security;
drop policy if exists "Users can manage their own CV data." on cv_data;
create policy "Users can manage their own CV data." on cv_data
  for all using (auth.uid() = id);

-- 4. Bangla Nutri-Plan App Tables

-- Table for user's dietary exclusions and profile
create table if not exists banglanutri_profiles (
  id uuid primary key references public.profiles(id) on delete cascade,
  age int,
  weight_kg numeric,
  height_cm numeric,
  activity_level text, -- 'sedentary', 'light', 'moderate', 'active'
  goal text, -- 'lose', 'maintain', 'gain'
  exclusions text[],
  updated_at timestamp with time zone default now()
);


alter table banglanutri_profiles enable row level security;
drop policy if exists "Users can manage their own nutri-plan profile." on banglanutri_profiles;
create policy "Users can manage their own nutri-plan profile." on banglanutri_profiles
  for all using (auth.uid() = id);

-- Table for logged meals
create table if not exists banglanutri_logged_meals (
  id bigint generated by default as identity primary key,
  user_id uuid references public.profiles(id) on delete cascade not null,
  meal_id text not null,
  logged_date date not null default current_date,
  created_at timestamp with time zone default now(),
  unique(user_id, meal_id, logged_date)
);

alter table banglanutri_logged_meals enable row level security;
drop policy if exists "Users can manage their own logged meals." on banglanutri_logged_meals;
create policy "Users can manage their own logged meals." on banglanutri_logged_meals
  for all using (auth.uid() = user_id);

-- 5. Storage Buckets

-- Avatar bucket for user profiles (publicly readable)
insert into storage.buckets (id, name, public)
values ('avatars', 'avatars', true)
on conflict (id) do nothing;

drop policy if exists "Avatar images are publicly viewable." on storage.objects;
create policy "Avatar images are publicly viewable."
  on storage.objects for select
  using ( bucket_id = 'avatars' );

drop policy if exists "Users can upload their own avatar." on storage.objects;
create policy "Users can upload their own avatar."
  on storage.objects for insert
  with check ( auth.uid() = owner and bucket_id = 'avatars' );
  
drop policy if exists "Users can update their own avatar." on storage.objects;
create policy "Users can update their own avatar."
 on storage.objects for update
 using ( auth.uid() = owner )
 with check ( bucket_id = 'avatars' );
 
drop policy if exists "Users can delete their own avatar." on storage.objects;
create policy "Users can delete their own avatar."
 on storage.objects for delete
 using ( auth.uid() = owner );

-- CV photos bucket (private)
insert into storage.buckets (id, name, public)
values ('cv_photos', 'cv_photos', false)
on conflict (id) do nothing;

drop policy if exists "Users can manage their own CV photos." on storage.objects;
create policy "Users can manage their own CV photos."
  on storage.objects for all
  using ( auth.uid() = owner and bucket_id = 'cv_photos' );

-- Bangla Nutri-Plan images bucket (private)
insert into storage.buckets (id, name, public)
values ('banglanutri_images', 'banglanutri_images', false)
on conflict (id) do nothing;

drop policy if exists "Users can manage their own meal plan images." on storage.objects;
create policy "Users can manage their own meal plan images."
  on storage.objects for all
  using ( auth.uid() = owner and bucket_id = 'banglanutri_images' );

-- 6. Chat Feature Tables

create table if not exists chat_messages (
  id bigint generated by default as identity primary key,
  sender_id uuid references public.profiles on delete cascade not null,
  receiver_id uuid references public.profiles on delete cascade not null,
  content text, -- For simple text messages, now nullable
  message_type text not null default 'text', -- 'text', 'watch-invite', 'watch-accept'
  payload jsonb, -- For structured data like movie details
  created_at timestamp with time zone not null default now()
);

alter table chat_messages enable row level security;

-- Allow users to see messages they sent or received
drop policy if exists "Users can view their own chat messages." on chat_messages;
create policy "Users can view their own chat messages." on chat_messages
  for select using (auth.uid() = sender_id or auth.uid() = receiver_id);

-- Allow users to send messages
drop policy if exists "Users can insert their own chat messages." on chat_messages;
create policy "Users can insert their own chat messages." on chat_messages
  for insert with check (auth.uid() = sender_id);

-- Allow users to update their sent messages (for invite status)
drop policy if exists "Users can update their sent messages." on chat_messages;
create policy "Users can update their sent messages." on chat_messages
  for update using (auth.uid() = sender_id);
  
-- Enable realtime on messages table safely
-- This command adds the chat_messages table to Supabase's realtime publication,
-- allowing the app to listen for new messages instantly via websockets.
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1
    FROM pg_publication_tables
    WHERE pubname = 'supabase_realtime' AND tablename = 'chat_messages'
  ) THEN
    ALTER PUBLICATION supabase_realtime ADD TABLE chat_messages;
  END IF;
END $$;


-- 7. Gemini Bangla Chat History
create table if not exists gemini_bangla_chat_history (
  user_id uuid primary key references public.profiles(id) on delete cascade not null,
  history jsonb,
  updated_at timestamp with time zone default now()
);

alter table gemini_bangla_chat_history enable row level security;

drop policy if exists "Users can manage their own gemini bangla history." on gemini_bangla_chat_history;
create policy "Users can manage their own gemini bangla history." on gemini_bangla_chat_history
  for all using (auth.uid() = user_id);

-- 8. App Hub Preferences
create table if not exists app_hub_preferences (
  user_id uuid primary key references public.profiles(id) on delete cascade not null,
  app_order text[],
  recently_used text[],
  updated_at timestamp with time zone default now()
);

-- Add wallpaper column if it doesn't exist
ALTER TABLE public.app_hub_preferences ADD COLUMN IF NOT EXISTS wallpaper text;
ALTER TABLE public.app_hub_preferences ADD COLUMN IF NOT EXISTS pinned_apps text[];


alter table app_hub_preferences enable row level security;

drop policy if exists "Users can manage their own app hub preferences." on app_hub_preferences;
create policy "Users can manage their own app hub preferences." on app_hub_preferences
  for all using (auth.uid() = user_id);

-- 9. Todo List App
create table if not exists todo_tasks (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references public.profiles(id) on delete cascade not null,
  title text not null,
  category text not null default 'General',
  priority text not null default 'Medium', -- High, Medium, Low
  status text not null default 'Pending', -- Pending, InProgress, Done, Cancelled
  due_date timestamp with time zone,
  created_at timestamp with time zone not null default now()
);

alter table todo_tasks enable row level security;

drop policy if exists "Users can manage their own tasks." on todo_tasks;
create policy "Users can manage their own tasks." on todo_tasks
  for all using (auth.uid() = user_id);